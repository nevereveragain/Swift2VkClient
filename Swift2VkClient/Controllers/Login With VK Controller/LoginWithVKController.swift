//
//  LoginWithVKController.swift
//  Swift2VkClient
//
//  Created by yosh on 25.05.2018.
//  Copyright ¬© 2018 yosh. All rights reserved.
//

import UIKit
import WebKit
import Alamofire

class LoginWithVKController: UIViewController {
    

    @IBOutlet weak var webView: WKWebView!
    var token: String?

    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        
        webView.navigationDelegate = self
        
        if let request = vkAuthRequest() {
            webView.load(request)
        }
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        guard let friendScene = segue.destination as? FriendsSceneController else {return}
        friendScene.token = token
    }
    
    func vkAuthRequest() -> URLRequest? {
        var urlConstructor = URLComponents()
        urlConstructor.scheme = "http"
        urlConstructor.host = "oauth.vk.com"
        urlConstructor.path = "/authorize"
        urlConstructor.queryItems = [
            URLQueryItem(name: "client_id", value: "6485589"),
            URLQueryItem(name: "redirect_uri", value: "https://oauth.vk.com/blank.html"),
            URLQueryItem(name: "response_type", value: "token"),
            URLQueryItem(name: "scope", value: "262150"),
            URLQueryItem(name: "v", value: "5.78")
        ]
        guard let url = urlConstructor.url else { return nil }
        
        return URLRequest(url: url)
    }
    
    func goToScreen () {
        self.performSegue(withIdentifier: "performVk", sender: self)
    }
    // MARK: Lesson 4
    // –°–ø—Ä–∞—à–∏–≤–∞–ª –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ:
    //@swiftcampus —É –º–µ–Ω—è –≤–æ–ø—Ä–æ—Å.
    //
    //–ö–æ–Ω—Ç–µ–∫—Å—Ç - –Ω–µ –∑–Ω–∞—è, –∫–∞–∫ –ø—Ä–∏–∫–æ–ø–∞—Ç—å –¥–∞–Ω–Ω—ã–µ, –ø—Ä–∏–¥–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å —Å prepare(for segue: UIStoryboardSegue, sender: Any?) –∞ –∑–Ω–∞—á–∏—Ç, —Ç–∞—â–∏—Ç—å —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ –≤–æ–æ–±—â–µ –≤—Å–µ —ç–∫—Ä–∞–Ω—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    //
    //–ê —Å —É—á–µ—Ç–æ–º —Ç–æ–≥–æ, —á—Ç–æ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ—Ö–æ–¥ —É –Ω–∞—Å –∏–¥–µ—Ç –≤ —Ç–∞–±–±–∞—Ä –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä, —ç—Ç–∞ –∏–¥–µ—è –≤—ã–≥–ª—è–¥–∏—Ç –ø—É–≥–∞—é—â–µ üôÇ
    //
    //–Ø –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ –Ω–∞–º –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∫ –∞–ø–∏ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –Ω–∞ —Ç–æ–º –∂–µ —ç–∫—Ä–∞–Ω–µ, –≥–¥–µ –º—ã –ø–æ–ª—É—á–∏–ª–∏ —Ç–æ–∫–µ–Ω?
    
    // –ù–∞ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–ª–æ –≤—Ä–µ–º—è —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É –≤—ã –Ω–µ —É—Å–ø–µ–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–æ—ç—Ç–æ–º—É –ø—Ä–∏–∫–ª–∞–¥—ã–≤–∞—é –ø–æ–∫–∞ —Ç–∞–∫, –¥—É–º–∞—é, –∫–æ–≥–¥–∞ –º—ã –ø—Ä–∏–¥–µ–º –∫ —Ö—Ä–∞–Ω–µ–Ω–∏—é –¥–∞–Ω–Ω—ã—Ö, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –≤—ã–Ω–µ—Å—Ç–∏ –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —ç–∫—Ä–∞–Ω—ã —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏.
    // –í —Ü–µ–ª–æ–º, –µ—Å–ª–∏ –±—ã –ø–æ–Ω–∞–¥–æ–±–∏–ª–æ—Å—å —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–π –ª–æ–≥–∏–∫–µ - –º–Ω–µ –ø—Ä–∏—à–ª–æ—Å—å –±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å prepare —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–æ–∫–µ–Ω –Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —ç–∫—Ä–∞–Ω

    
    // MARK: 4.1
    // –¢–∞–∫ –∫–∞–∫ —É –Ω–∞—Å –≤ –¥–≤—É—Ö –∑–∞–¥–∞–Ω–∏—è—Ö - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏ –≤—ã–≤–µ—Å—Ç–∏ —Ñ–æ—Ç–æ –¥—Ä—É–≥–∞, —è —Å–¥–µ–ª–∞–ª –æ–¥–Ω—É —Ñ—É–Ω–∫—Ü–∏—é, –≤ –∫–æ—Ç–æ—Ä–æ–π –¥–æ–ø.–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º –∑–∞–ø—Ä–æ—à—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –¥—Ä—É–≥–∞
    func loadFriendsListWithPhoto() {
        guard let userToken = token else {return}
        let path = "https://api.vk.com/method/friends.get"
        let parameters: Parameters = [
            "access_token": userToken,
            "fields": "photo_100",
            "v": "5.78"
        ]
        
        Alamofire.request(path, parameters: parameters).responseJSON { (response) in
            if let error = response.error {
                print(error)
                return
            }
            
            if let value = response.value {
                print(value)
            }
        }
    }
    
    func getUserGroups() {
        guard let userToken = token else {return}
        let path = "https://api.vk.com/method/groups.get"
        let parameters: Parameters = [
            "access_token": userToken,
            "v": "5.78"
        ]
        
        Alamofire.request(path, parameters: parameters).responseJSON { (response) in
            if let error = response.error {
                print(error)
                return
            }
            
            if let value = response.value {
                print(value)
            }
        }
    }
    
    func getGroupsFromQuery(_ query: String) {
        guard let userToken = token else {return}
        let path = "https://api.vk.com/method/groups.search"
        let parameters: Parameters = [
            "access_token": userToken,
            "v": "5.78",
            "q": query
        ]
        
        Alamofire.request(path, parameters: parameters).responseJSON { (response) in
            if let error = response.error {
                print(error)
                return
            }
            
            if let value = response.value {
                print(value)
            }
        }
    }
    
}

extension LoginWithVKController: WKNavigationDelegate {
    func webView(_ webView: WKWebView, decidePolicyFor navigationResponse: WKNavigationResponse, decisionHandler: @escaping (WKNavigationResponsePolicy) -> Swift.Void) {
        
        guard let url = navigationResponse.response.url,
            url.path == "/blank.html",
            let fragment = url.fragment else {
                decisionHandler(.allow)
                return
        }
        
        let params = fragment
            .components(separatedBy: "&")
            .map({ $0.components(separatedBy: "=") })
            .reduce([String: String]()) { result, param in
                var dict = result
                let key = param[0]
                let value = param[1]
                dict[key] = value
                return dict
        }
        
        if let token = params["access_token"] {
            print(token)
            self.token = token
            loadFriendsListWithPhoto()
            getUserGroups()
            getGroupsFromQuery("Dodo pizza")
            // –î–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –∑–∞–∫–æ–º–µ–Ω—Ç–∏–ª –≤—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –¥—Ä—É–≥–æ–π —ç–∫—Ä–∞–Ω
//            goToScreen()
        }
        
        decisionHandler(.allow)
    }
    
}




